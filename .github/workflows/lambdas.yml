name: lambdas pipeline

on: workflow_call

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: "Checkout"
        uses: actions/checkout@v3
      -
        name: Run lint
        run: |
             docker pull ghcr.io/frentecorretora/zrpaplicacoes/docker-in-node:12.9.0-alphine
             docker-compose run --rm specs ash -c "npm i && npm run lint" && docker-compose down

  test:
    runs-on: ubuntu-latest
    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: "Checkout"
        uses: actions/checkout@v3
      -
        name: Run test
        run: |
             docker pull ghcr.io/frentecorretora/zrpaplicacoes/docker-in-node:12.9.0-alphine
             docker pull ghcr.io/frentecorretora/redis:4.0.10-alpine
             docker-compose run --rm specs ash -c "npm i && npm test" && docker-compose down
  
  deploy:
    runs-on: ubuntu-latest
    needs: [lint, test]
    container:
      image: ghcr.io/frentecorretora/node:10
      credentials:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    permissions:
      id-token: write
      contents: read
    if: github.ref == 'refs/heads/test' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/homolog' || github.ref == 'refs/heads/prod'
    steps:
      - 
        name: "Checkout"
        uses: actions/checkout@v3
      -
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::277048801940:role/GithubActions
          aws-region: us-east-1
      - 
        name: Get environment
        id: branch-name
        uses: tj-actions/branch-names@v5.5
      - 
        name: Sets env vars for dev
        run: |
          echo "ROLE_TO_ASSUME=arn:aws:iam::911029263118:role/DevAccountAccessRole" >> $GITHUB_ENV
        if: startsWith(github.ref, 'refs/heads/dev')
      - 
        name: Sets env vars for homolog
        run: |
          echo "ROLE_TO_ASSUME=arn:aws:iam::973021393063:role/HomologAccountAccessRole" >> $GITHUB_ENV
        if: startsWith(github.ref, 'refs/heads/homolog')
      - 
        name: Sets env vars for production
        run: |
          echo "ROLE_TO_ASSUME=arn:aws:iam::379845053270:role/DemoAccountAccessRole" >> $GITHUB_ENV
        if: startsWith(github.ref, 'refs/heads/prod')
      -
        name: Serverless deploy
        run: |
             echo "$IAM_ROLES" >> credentials         
             export AWS_SHARED_CREDENTIALS_FILE="$PWD/credentials"
             ENVIRONMENT=${{ steps.branch-name.outputs.current_branch }}
             echo "Running on: $ENVIRONMENT"
             npm install
             if [ $ENVIRONMENT != "prod" ]; then
              export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
              $(aws sts assume-role \
              --role-arn $ROLE_TO_ASSUME \
              --role-session-name PipelineSession \
              --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
              --output text))
              echo "vars de $ENVIRONMENT $AWS_ACCESS_KEY_ID"
              npm run deploy:$ENVIRONMENT
             else
              npm run deploy:$ENVIRONMENT
              export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
              $(aws sts assume-role \
              --role-arn arn:aws:iam::379845053270:role/DemoAccountAccessRole \
              --role-session-name PipelineSession \
              --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
              --output text))
              echo "vars de $ENVIRONMENT $AWS_ACCESS_KEY_ID"
              npm run deploy:demo
             fi
        env:
          IAM_ROLES: ${{secrets.IAM_ROLES}}